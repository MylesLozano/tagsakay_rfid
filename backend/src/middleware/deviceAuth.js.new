/**
 * Device Authentication Middleware for TagSakay RFID system
 * This middleware authenticates devices using MAC address or API key
 */

import { Device } from "../models/index.js";
import logger from "../config/logger.js";

/**
 * Middleware to authenticate devices using either MAC address or API key
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
export const authenticateDevice = async (req, res, next) => {
  try {
    // Get deviceId from route parameter or request body
    const deviceId = req.params.deviceId || req.body.deviceId;
    
    if (!deviceId) {
      return res.status(401).json({
        success: false,
        message: "Device ID is required",
      });
    }
    
    // Check authentication options
    const apiKey = req.headers["x-api-key"];
    const macAddress = req.body.macAddress;
    
    let device = null;
    
    // First try to authenticate using API key header
    if (apiKey) {
      device = await Device.findOne({
        where: { apiKey, isActive: true },
      });
    }
    
    // If not found with API key, try deviceId (MAC address without colons)
    if (!device && deviceId) {
      device = await Device.findOne({
        where: { deviceId, isActive: true },
      });
      
      // If device found but macAddress doesn't match, reject
      if (device && macAddress && device.macAddress !== macAddress) {
        logger.warn(`Device ${deviceId} tried to authenticate with incorrect MAC address`);
        return res.status(401).json({
          success: false,
          message: "Invalid device authentication",
        });
      }
    }
    
    // If still not found, check if macAddress provided matches any device
    if (!device && macAddress) {
      // Try with the raw MAC address
      device = await Device.findOne({
        where: { macAddress, isActive: true },
      });
      
      // Also try with normalized MAC (no colons)
      if (!device) {
        const normalizedMac = macAddress.replace(/:/g, "").toUpperCase();
        device = await Device.findOne({
          where: { deviceId: normalizedMac, isActive: true },
        });
      }
    }
    
    if (!device) {
      logger.warn(`Failed device authentication attempt for ${deviceId}`);
      return res.status(401).json({
        success: false,
        message: "Invalid device authentication",
      });
    }
    
    // Update last seen timestamp
    device.lastSeen = new Date();
    await device.save();
    
    // Add device to request object for use in controllers
    req.device = device;
    
    // Authentication successful
    next();
  } catch (error) {
    logger.error(`Device authentication error: ${error.message}`, { error });
    return res.status(500).json({
      success: false,
      message: "Authentication error",
      error: error.message,
    });
  }
};